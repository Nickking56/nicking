#include <cuda_runtime.h>
#include <stdio.h>
#include "device_launch_parameters.h"
#include <iostream>
#include <cmath>
#include <cstdlib>
template <int TILE_WIDTH>
__global__ void MatrixMulKernel(float* P, const float* M, const float* N, int Width) {
    __shared__ float Ms[TILE_WIDTH][TILE_WIDTH];
    __shared__ float Ns[TILE_WIDTH][TILE_WIDTH];

    int bx = blockIdx.x; int by = blockIdx.y;
    int tx = threadIdx.x; int ty = threadIdx.y;

    // Identify the row and column of the P element to work on
    int Row = by * TILE_WIDTH + ty;
    int Col = bx * TILE_WIDTH + tx;

    float Pvalue = 0;

    // Loop over the M and N tiles required to compute the P element
    for (int m = 0; m < (Width / TILE_WIDTH); ++m) {
        // Load the matrices from device memory to shared memory; each thread loads one element of each matrix
        Ms[ty][tx] = M[Row * Width + (m * TILE_WIDTH + tx)];
        Ns[ty][tx] = N[(m * TILE_WIDTH + ty) * Width + Col];

        // Synchronize to make sure the matrices are loaded
        __syncthreads();

        // Multiply the two matrices together;
        for (int k = 0; k < TILE_WIDTH; ++k) {
            Pvalue += Ms[ty][k] * Ns[k][tx];
        }

        // Synchronize to make sure that the preceding computation is done before loading two new sub-matrices of M and N in the next iteration
        __syncthreads();
    }

    // Write the matrix to device memory; each thread writes one element
    P[Row * Width + Col] = Pvalue;
}


// Host helper function to compare the GPU and CPU results
bool verifyResult(float* cpuResult, float* gpuResult, int N) {
    const float epsilon = 1e-5;
    for (int i = 0; i < N * N; i++) {
        if (fabs(cpuResult[i] - gpuResult[i]) > epsilon) {
            return false;
        }
    }
    return true;
}

// Simple CPU matrix multiplication for verification
void matrixMulCPU(float* C, const float* A, const float* B, int width) {
    for (int row = 0; row < width; row++) {
        for (int col = 0; col < width; col++) {
            float sum = 0;
            for (int n = 0; n < width; n++) {
                sum += A[row * width + n] * B[n * width + col];
            }
            C[row * width + col] = sum;
        }
    }
}

void matrixMulGPU(float* h_P, const float* h_M, const float* h_N, int Width, int tileSize) {
    float* d_M, * d_N, * d_P;

    size_t size = Width * Width * sizeof(float);
    cudaMalloc(&d_M, size);
    cudaMalloc(&d_N, size);
    cudaMalloc(&d_P, size);

    cudaMemcpy(d_M, h_M, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_N, h_N, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(tileSize, tileSize);
    dim3 dimGrid((Width + tileSize - 1) / tileSize, (Width + tileSize - 1) / tileSize);
    switch (tileSize) {
    case 2:
        MatrixMulKernel<2> << <dimGrid, dimBlock >> > (d_P, d_M, d_N, Width);
        break;
    case 5:
        MatrixMulKernel<5> << <dimGrid, dimBlock >> > (d_P, d_M, d_N, Width);
        break;
    case 10:
        MatrixMulKernel<10> << <dimGrid, dimBlock >> > (d_P, d_M, d_N, Width);
        break;
    case 25:
        MatrixMulKernel<25> << <dimGrid, dimBlock >> > (d_P, d_M, d_N, Width);
        break;
    default:
        printf("Unsupported TILE_WIDTH\n");
    }

    cudaMemcpy(h_P, d_P, size, cudaMemcpyDeviceToHost);

    cudaFree(d_M);
    cudaFree(d_N);
    cudaFree(d_P);
}

int main() {
    const int Width = 100; // Example: 100x100 matrix; repeat for 250, 500, 1000, 1500
    const int TILE_WIDTHS[] = { 2, 5, 10, 25 };

    float* h_M = (float*)malloc(Width * Width * sizeof(float));
    float* h_N = (float*)malloc(Width * Width * sizeof(float));
    float* h_P = (float*)malloc(Width * Width * sizeof(float)); // GPU result
    float* h_P_cpu = (float*)malloc(Width * Width * sizeof(float)); // CPU result for verification

    // Initialize matrices M and N with random values
    for (int i = 0; i < Width * Width; i++) {
        h_M[i] = rand() / (float)RAND_MAX;
        h_N[i] = rand() / (float)RAND_MAX;
    }

    // Perform CPU matrix multiplication for verification
    matrixMulCPU(h_P_cpu, h_M, h_N, Width);

    for (int i = 0; i < sizeof(TILE_WIDTHS) / sizeof(TILE_WIDTHS[0]); i++) {
        int tileSize = TILE_WIDTHS[i];
        printf("Running kernel with TILE_WIDTH = %d\n", tileSize);
        matrixMulGPU(h_P, h_M, h_N, Width, tileSize);

        if (verifyResult(h_P_cpu, h_P, Width)) {
            printf("Test PASSED\n");
        }
        else {
            printf("Test FAILED\n");
        }
    }

    free(h_M);
    free(h_N);
    free(h_P);
    free(h_P_cpu);

    return 0;
}
